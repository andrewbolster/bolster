[project]
name = "bolster"
version = "0.3.4"
description = "Bolster's Brain, you've been warned"
authors = [
    {name = "Andrew Bolster", email = "andrew.bolster@gmail.com"},
]
readme = "README.rst"
classifiers = [
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
]

keywords = [
    "bolster",
    "api",
    "data science",
    "data",
    "data engineering",
    "data analysis",
    "data pipeline",
    "data processing",
    "data wrangling",
    "data transformation",
    "cli",
    "command line interface",
    "python",
]
requires-python = ">=3.8,<4.0"
dependencies = [
    "boto3>=1.37.37",
    "bs4>=0.0.2",
    "click>=8.1.8",
    "click-log>=0.4.0",
    "dateparser>=1.2.1",
    "lxml>=5.3.2",
    "numpy>=1.24.4",
    "openpyxl>=3.1.5",
    "pandas>=2.0.3",
    "pillow>=10.4.0",
    "psycopg2-binary>=2.9.10",
    "pytest-cov>=5.0.0",
    "requests>=2.32.3",
    "requests-cache>=1.2.1",
    "scipy>=1.10.1",
    "tqdm>=4.67.1",
    "waybackpy>=3.0.6",
    "xlrd>=2.0.1",
]

[project.urls]
Homepage = "https://github.com/andrewbolster/bolster"
Documentation = "https://bolster.readthedocs.io"
Repository = "https://github.com/andrewbolster/bolster.git"
"Bug Tracker" = "https://github.com/andrewbolster/bolster/issues"

[project.scripts]
bolster = "bolster.cli:cli"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
version = { source = "file", path = "src/bolster/__init__.py" }

[tool.pytest.ini_options]
testpaths = ["tests","src"]
pythonpath = "src"
addopts = [
    "--cov=bolster",
    "--cov-report=term-missing",
    "--import-mode=importlib",
    "--doctest-modules",
    "--doctest-continue-on-failure",
    "--ignore=notebooks"
]

[tool.ruff]
lint.select = ["E", "F", "I"]
lint.ignore = ["E501"]
line-length = 120

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.coverage.run]
source = ["bolster"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
]

[tool.bumpversion]
current_version = "0.3.4"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
sign_tags = true
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = true
commit = true
message = "Bump version: {current_version} → {new_version}"
moveable_tags = []
commit_args = ""
setup_hooks = []
pre_commit_hooks = []
post_commit_hooks = []

[dependency-groups]
dev = [
    "pre-commit",
    "pytest",
    "ipykernel",
    "httpx",
    "pytest-cov",
    "pytest-mock",
    "ruff",
    "nbmake"
]
docs = ["Sphinx", "sphinx-click", "sphinx-issues", "nbsphinx", "sphinx-rtd-theme",
    "sphinx-autodoc-typehints", "sphinx-autoapi", "autoapi", "sphinxcontrib-apidoc",
    "sphinxcontrib-plantuml", "sphinxcontrib-mermaid",
    "sphinx-github-changelog", "myst-parser", "sphinx-copybutton",]
